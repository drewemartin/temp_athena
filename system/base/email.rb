#!/usr/local/bin/ruby
#require "#{File.dirname(__FILE__)}/base"
class Email #< Base

    #---------------------------------------------------------------------------
    def initialize()
        super()
        @structure = nil
    end
    #---------------------------------------------------------------------------
   
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
public
def xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxPUBLIC_METHODS
end
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    def send(a={})
        #:subject            => nil,        
        #:content            => nil,         
        #:sender             => nil,
        #:recipients         => nil,
        #:attachment_name    => nil,  
        #:attachment_path    => nil,
        #:email_relate       => [
        #    {:table_name=>nil, :key_field=>nil, :key_field_value=>nil},
        #    {:table_name=>nil, :key_field=>nil, :key_field_value=>nil}
        #]
        
        a[:recipients] = a[:recipients].type == Array.new ? a[:recipients] : [a[:recipients]]
        
        #CREATE EMAIL LOGS THEN SEND THE EMAIL, THEN MARK SUCCSSFULL/NOT
        email_record = $tables.attach("EMAIL").new_row
        
        email_record.fields["subject"          ].value = a[:subject        ]
        email_record.fields["content"          ].value = a[:content        ]
        email_record.fields["sender"           ].value = a[:sender         ]
        email_record.fields["recipients"       ].value = a[:recipients     ].join(",")
        email_record.fields["attachment_name"  ].value = a[:attachment_name]
        email_record.fields["attachment_path"  ].value = a[:attachment_path]
        email_record.save
        
        a[:recipients].each{|recipient|
            
            if team_member = $team.find(:email_address=>recipient)
                
                email_relate_record = $tables.attach("EMAIL_RELATE").new_row
                email_relate_record.fields["email_id"        ].value = email_record.primary_id
                email_relate_record.fields["table_name"      ].value = "team"
                email_relate_record.fields["key_field"       ].value = "primary_id"
                email_relate_record.fields["key_field_value" ].value = team_member.primary_id.value
                email_relate_record.save
                
            end
            
            if a[:email_relate]
                
                a[:email_relate].each{|related|
                    
                    email_relate_record = $tables.attach("EMAIL_RELATE").new_row
                    email_relate_record.fields["email_id"        ].value = email_record.primary_id
                    email_relate_record.fields["table_name"      ].value = related[:table_name]
                    email_relate_record.fields["key_field"       ].value = related[:key_field]
                    email_relate_record.fields["key_field_value" ].value = related[:key_field_value]
                    email_relate_record.save
                    
                }
                
            end
            
        }
        
        try = athena_smtp_email(
            a[:recipients],
            a[:subject],
            a[:content],
            a[:attachment_path],
            from_override = nil,
            a[:attachment_name]
        )
        
        email_record.fields["success"          ].value = (try ? true : false)
        email_record.save
        
        return email_record
        
    end

def athena_smtp_email(recipient_email, subject, content, attachment_path = nil, from_override = nil, attachment_name_override = nil)
    smtp_email("donotreply@athena-sis.com", "lemodie_23", recipient_email, subject, content, attachment_path, from_override, attachment_name_override)
end

def smtp_email(sender_email, sender_secret, recipient_email, subject, content, attachment_path = nil, from_override = nil, attachment_name_override = nil)
    
    if ENV["COMPUTERNAME"] && !ENV["COMPUTERNAME"].match(/ATHENA|HERMES/)
        
        from_override = "GENERATED BY: #{ENV["COMPUTERNAME"]}"
        recipient_arr = [$sys_admin_email]
        
    else
        
        if recipient_email.class == Array
            
            recipient_arr = recipient_email
            
        elsif recipient_email.class == String
            
            if recipient_email.include?(",")
                recipient_arr = recipient_email.split(",")
            else
                recipient_arr = recipient_email.split(";") 
            end
            
        end
        
        recipient_arr.push("athena-reports@agora.org")
        
    end
    
    if attachment_path
        
        filename = attachment_path.split("/")[-1] 
        
        # Read a file and encode it into base64 format
        filecontent = String.new
        File.open(attachment_path, 'rb') do |file|
            filecontent = file.read
        end
        
        encodedcontent = [filecontent].pack("m")   # base64
        
    end
    
    marker = "AUNIQUEMARKER"

    disclaimer_notice =
        "<br><br>CONFIDENTIALITY STATEMENT: The documents and communication included in this email transmission may contain confidential information. All information is intended only for the use of the above named recipient(s). If you are not the named recipient, you are NOT authorized to read, disclose, copy, distribute, or take any action on the information and any action other than immediate delivery to the named recipient is strictly prohibited. If you have received this email in error, do NOT read the information and please immediately notify sender by telephone and email and immediately delete this email. If you are the named recipient, you are NOT authorized to reveal any of this information to any unauthorized person and are hereby instructed to delete this email when no longer needed."
    body = content + disclaimer_notice
    
# Define the main headers.
part1 =<<EOF
From: <#{from_override || sender_email}>
To: <#{recipient_arr.join(";")}>
Subject: #{subject}
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=#{marker}

--#{marker}
EOF
    
# Define the message action
part2 =<<EOF
Content-Type: text/html
Content-Transfer-Encoding:8bit

#{body}
--#{marker}
EOF
    
# Define the attachment section
if attachment_path
part3 =<<EOF
Content-Type: application/pdf: File Type: Binary; name=#{attachment_name_override || filename}
Content-Transfer-Encoding:base64
Content-Disposition: attachment; filename=#{attachment_name_override || filename}

#{encodedcontent}
--#{marker}--
EOF
end
    
    mailtext = part1    + part2
    mailtext = mailtext + part3 if attachment_path
    
    results = false
    # Let's put our code in safe area
    begin
        
        #GMAIL VERSION IF NEEDED:
        smtp = Net::SMTP.new('smtp.gmail.com', 587)
        smtp.enable_starttls
        smtp.start('gmail.com', "agora.athenasis@gmail.com", "Lemodie_23", :plain) do |s|
            s.send_message(mailtext, from_override, recipient_arr)
        end
        
        #donotreply@athena-sis.com version - we should use this for district notifications
        #smtp = Net::SMTP.start('smtpout.secureserver.net', 25, 'smtpout.secureserver.net', sender_email, sender_secret, :plain)
        #return smtp.send_message(msgstr = mailtext, from_addr = "donotreply@athena-sis.com", to_addrs = recipient_arr)
        
        #Net::SMTP.start('dedrelay.secureserver.net', 25, 'smtpout.secureserver.net', sender_email, sender_secret, :cram_md5) do |smtp|
        #    results1 = smtp.sendmail(
        #        mailtext,
        #        sender_email,
        #        recipient_arr
        #    )
        #    #results2 = smtp.sendmail(
        #    #    mailtext.gsub("Subject: ","Subject: Sent on your behalf from Athena-SIS TO: #{recipient_email} SUBJECT: "),
        #    #    sender_email,
        #    #    [sender_email,"athena-reports@agora.org"]
        #    #)
        #    results = results1.message #"#{results1.message} #{results2.message}"
        #    #$base.system_log("SMTP EMAIL RESULTS: #{results}")
        #end
    rescue Exception => e
        $base.system_log(
            subject = "SMTP Email Failed!
            SENDER:     #{sender_email}
            RECIPIENT:  #{recipient_email}
            EMAIL BODY: #{mailtext}
            RESULTS:    #{results}
            ERROR:      #{e.message}",
            caller[0],
            e
        )
        results = false
    end
    
    return results

end

#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
def x______________STRUCTURE
end
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    
    def structure
        if @structure.nil?
            @structure = Hash.new
        end
        @structure
    end

#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
private
def xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxPRIVATE_METHODS
end
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

end

#Email.new.athena_smtp_email("jhalverson@agora.org", "teLIHVHVst", "teLKHVYUKVst", attachment_path = nil, from_override = nil)